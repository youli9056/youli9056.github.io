<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | 秦风汉雨]]></title>
  <link href="http://youli9056.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://youli9056.github.io/"/>
  <updated>2014-11-07T17:23:29+08:00</updated>
  <id>http://youli9056.github.io/</id>
  <author>
    <name><![CDATA[You Li]]></name>
    <email><![CDATA[youli9056@126.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java为何不支持多继承  Why Multiple Inheritance is Not Supported in Java]]></title>
    <link href="http://youli9056.github.io/blog/why-multiple-inheritance-is-not-supported-in-java/"/>
    <updated>2014-11-06T21:43:11+08:00</updated>
    <id>http://youli9056.github.io/blog/why-multiple-inheritance-is-not-supported-in-java</id>
    <content type="html"><![CDATA[<p>James Gosling 在95年二月发表的名为“Java: an Overview”的白皮书中给出了为什么Java不支持多继承的思考。</p>

<blockquote><p>Java略去了好多C++中很少用到的，很难理解的，令人困惑的特性，根据我们的经验这些特性带来的麻烦比它们带来的好处更多。这些去掉的特征主要包括操作符重载(但是Java有方法重载)，<strong>多继承</strong>，广泛的自动强制类型转换。</p></blockquote>

<p>还有谁比James Gosling更有资格来对此作评论。这段话给了我们一个概要，并提起了不支持多继承的话题。</p>

<h2>Java不支持多继承</h2>

<hr />

<p>首先让我们来盖棺定论。Java到底支不支持多继承本身就是一个争议点。有人说Java支持多继承。<strong>不，Java中没有对多继承的支持</strong>。如果你不相信我的话，把上面Java之父的那段话再读一下。</p>

<p>用接口支持多继承的说法是我们这些开发人员自己编造出来的。接口比实体类提供了更高的灵活性，我们可以选择用单个类去实现多个接口。这样我们通过继承两个模板来构建一个类。</p>

<p>这样做是在尝试向多继承靠近。其实我们做的是实现多个接口，却没有继承任何东西。实现一个类的接口的工作是向其中添加属性和方法，而不能直接从父类中获取具体实现。简单地说，Java中没有堆多继承的支持。</p>

<!--more-->


<h2>多继承 Multiple Inheritance</h2>

<p>多继承是我们在一个类中继承多个类的属性和方法。C++，Common Lisp等是常见的流行编程语言中支持多继承的。</p>

<p><img src="/images/multipleinheritance/Multiple-Inheritance.png" alt="Multiple-Inheritance" /></p>

<h2>Java为什么不支持多继承？  Why Java does not support multiple inheritance?</h2>

<p>现在我们确认了一点：Java不支持多继承。但是为什么？这是Java的创造者们做得决定。主要原因是两点：简洁、极少用到。</p>

<p><strong>简洁</strong></p>

<p>我想分享下James Gosling给Java下的定义</p>

<blockquote><p>Java：一个简单的，面向对象的，分布式的，解释的，健壮的，安全的，架构中立的，可移植的，高性能的，多线程的，动态的语言。</p></blockquote>

<p>看看这个优美的Java定义。这是现代软件开发语言应有的定义。这定义的第一个特性是什么？简单！</p>

<p>为了简洁这个目的应该是删除多继承最主要的原因。比如，我们可以考虑下下面这个多继承的菱形问题。</p>

<p><img src="/images/multipleinheritance/Diamond-Problem-of-Multiple-Inheritance.png" alt="Diamond-Problem" /></p>

<p>有两个类B和C都继承自A。假设B和C都重载了继承自A的方法，并提供了它们各自不同的实现。现在有一各类D它用多继承同时继承了B、C。D应该继承那个重载的方法，但是使用的时候到底用的是哪个？B的，还是C的？这里不明确，会导致歧义。</p>

<p>C++中提供了额外的方法来规避这个陷阱。在Java中这个问题根本就不会出现。Java中即使一个类实现的多个接口里面有同样的方法，它也只会有一个这样的方法而且它会有自己的实现。类的动态加载机制使得实现多继承变得非常困难。</p>

<p><strong>很少使用</strong></p>

<p>Java已经投入使用很长时间了，有几次我们因为Java没有多继承而碰壁的？以我给人的经验来说，一次都没有！由于很少有场景需要多继承，再考虑到多继承带来的实现上的麻烦，多继承是可以安全的移出的。这样麻烦完全不值，因此Java选择了简洁的途径。</p>

<p>即使确实需要多继承时，我们也可以通过其他设计方法来达到要求。因此没有多继承Java照样可以工作得很好，而且不会带来其他问题，恐怕这也是不要多继承的原因之一。</p>

<p>对此，我的观点是，Java去除多继承并不是她的缺点而且对实现者来说会更简单。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[接口和抽象类的区别  Diference Between Interface and Abstract Class]]></title>
    <link href="http://youli9056.github.io/blog/diference-between-interface-and-abstract-class/"/>
    <updated>2014-11-06T18:03:19+08:00</updated>
    <id>http://youli9056.github.io/blog/diference-between-interface-and-abstract-class</id>
    <content type="html"><![CDATA[<p>面试过程中经常会被问道Java中接口和抽象类有什么区别，总觉得自己总结不好，也不全面。正好这里<a href="http://javapapers.com/core-java/abstract-and-interface-core-java-2/difference-between-a-java-interface-and-a-java-abstract-class/">有篇文章</a>感觉写得很好。下面是内容。</p>

<ol>
<li><p>接口最主要的不同是，接口默认是抽象的，本身不能有任何实现。抽象类可以有为子类提供的默认实例方法。</p></li>
<li><p>接口中的变量默认是final的。抽象类可以包含非final的变量。</p></li>
<li><p>接口的成员默认是public的。抽象类可以有任意类型的成员，private，protected都可以。</p></li>
<li><p>实现接口需要用implements关键字。继承抽象类用extends关键字。</p></li>
<li><p>接口继承一个或者多个接口，但是不能继承或实现任意抽象抑或者实体类。抽象类可以继承另外一个Java类同时还可以实现多个Java接口。</p></li>
<li><p>一个Java类可以实现多个接口，但是只能继承一个抽象类。</p></li>
<li><p>接口是完全抽象的，不能够实例化。抽象类也是不能被实例化的，但是如果其中有main()方法时，还是可以调用。</p></li>
<li><p>和抽象类相比，接口定义的引用在具体执行时由于需要做额外的间接寻址工作因此会慢些。(执行时需要通过搜索具体类的实现方法)</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入理解重载和重写及与之相关的多态性  Overloading and overriding]]></title>
    <link href="http://youli9056.github.io/blog/overloading-and-overriding/"/>
    <updated>2014-11-05T16:03:56+08:00</updated>
    <id>http://youli9056.github.io/blog/overloading-and-overriding</id>
    <content type="html"><![CDATA[<p>本文分割线之前非原创，翻译自<a href="http://javapapers.com/core-java/overloading-and-overriding/">Overloading and overriding</a>.</p>

<p>重载和重写除了在名称上有些相似之外，其实是完全不同的两个东西。</p>

<p>重载的目的是使得我们能够用用一个统一的接口名称来调用一系列方法。这些方法的目的也许是一样的，但是它们的实现方式会根据传入的参数不同而不同。</p>

<p>重写涉及到继承这个概念中的问题。子类继承了父类的方法，但是它可能需要有不同的操作行为，这时候就需要在子类中重写这个父类方法。</p>

<p>重载本身并不是多态，同时运行时绑定重载方法也不是多态的表现。它们以及一些其他的东西都是其面向对象多态性的使用（原文：All these and more are used to exercise the object oriented property polymorphism.总感觉翻译不要，故贴上来）。</p>

<h2>重载和重写的关键点</h2>

<ul>
<li>private： 一个私有的java方法是不能被重写的，因为它对子类压根就不可见</li>
<li>final：重载一个final的方法是可以的，但是不能重写它，因此父类如果将方法声明为final的就可保证所有子类的调用此方法时调用的都是父类的方法。</li>
<li>final：如果两个方法有同样的参数列表，而其中一个的参数被声明为final的这种情况下这两个方法完全一样，因此不可重载。编译都通不过，因为这两个方法被视为完全一样。</li>
<li>static：可以重载一个静态的Java方法但是不能重写静态的Java方法，因为静态方法在方法区中只有一个。</li>
<li>static：重载是关于对象(实例）和继承而言的。一个声明为静态的方法属于整个类(对于这个的所有对象都是一样的)。因此重写它没有任何意义。</li>
<li>static：对于重载，两个静态方法的重载没有什么特别的，只不过是修饰符多了个static修饰符。参数列表依然必须不同。</li>
</ul>


<!--more-->


<h2>重载</h2>

<p>让我们来详细讨论下重载。在各种网站上我看到了大量的重载的例子。它们向类中添加更多的属性、方法，把它变得看起来更庞大作为重载的象征。事实上正确的方式是，当我们使用重载时外部看起来我们的类会变得更加紧凑。</p>

<p><img src="/images/overloadingandoverriding/beforeoverloading.png" alt="重载之前" /></p>

<p>这里贴出来两个图片，第一张里面是印度的古典乐器脚踏式风琴，它是现代钢琴的鼻祖。另一幅图片是现代的电子琴。在我们的重载语境中，古典风琴是重载之前，电子琴是重载之后。</p>

<p><img src="/images/overloadingandoverriding/afteroverloading.png" alt="重载之后" /></p>

<h3>Java Example for Method Overloading</h3>

<hr />

<pre><code>public class OverloadingExample {
    public static void main(String args[]){
        System.out.println(playMusic("C sharp","D sharp"));
        System.out.println(playMusic("C","D flat","E flat"));
    }
    public static String playMusic(String c, String d){
        return c+d;
    }
    public static String playMusic(String c, String d, String e){
        return c+d+e;
    }
}
</code></pre>

<h3>Java Overloading Puzzle</h3>

<hr />

<pre><code>package com.javapapaer.java;

public class NullArguementOverloading {
    public static void main(String[] args) {
        NullArguementOverloading obj = new NullArguementOverloading();
        obj.overLoad(null);
    }
    private void overLoad(Object o){
        System.out.println("Object o arguement method.");
    }
    private void overLoad(double[] dArray){
        System.out.println("Double array argument method.");
    }
}
</code></pre>

<p>猜一猜，上面的输出是啥？</p>

<h3>Overriding  重写</h3>

<hr />

<p>当继承一个类的时候,根据父类方法的访问修饰符子类可以获得所有protect以上的父类方法。但是父类的方法的具体行为可能在子类中并不适合，因此我们需要根据子类对于这个方法的需求重写继承自父类的这个方法。重写后原来的旧方法对于这个子类会完全废弃。</p>

<p>看看下面这个猛兽皮卡，因为需求不同了，原来又小又旧的轮子被换成了巨无霸。这就是现实生活中的重写。</p>

<p><img src="/images/overloadingandoverriding/Overriding.png" alt="Overriding" /></p>

<h3>Overriding in Java/JDK</h3>

<p>在Java中默认所有对象都是继承自Object类。Object有个叫<em>equals</em>的方法，在String类中重写了它的默认行为。String中通过比较传入的对象与本身保存的字符串序列一一对比看是否相等。</p>

<h1>分割线～～～～～～～～～～～～～～～～～～～～～～～</h1>

<hr />

<p>关于上面Overloading Puzzle，以免强迫症患者费心敲代码在此给出答案和解释。</p>

<p>程序输出：<strong>Double array argument method.</strong></p>

<p>原因是Java对于重载的处理有个最精确原则。Object和double[]都可以和null匹配，但是两者对比而言，double[]比Object匹配得更精确，所以调用了下面的overLoad方法。如果想让程序调用Object的overLoad方法则需要一个强制类型转换<code>obj.overLoad((Object)null);</code>这样Object的overLoad就要比double[]的更精确,会输出<em>Object o arguement method.</em>。</p>

<p>下面这段代码也许理解起来会更清晰一些，ArrayList继承自List：</p>

<pre><code>import java.util.ArrayList;
import java.util.List;

public class OverridePuzzle {

    private void overloadList(List list){
        System.out.println("List arguement method.");
    }

    private void overloadList(ArrayList arrayList){
        System.out.println("ArrayList arguement method");
    }
    public static void main(String[] args) {
        OverridePuzzle op = new OverridePuzzle();
        op.overloadList(null);
    }

}
</code></pre>

<p>那么它将输出:<strong>ArrayList arguement method</strong>，因为ArrayList比List匹配得更精确。</p>

<p>那又要问了，如果上文的NullArguementOverloading代码中还有个overLoad方法如下：</p>

<pre><code>private void overLoad(String str) {
    System.out.println("String argument method.");
}
</code></pre>

<p>那么程序会怎样呢？答案是main函数<code>obj.overLoad(null)</code>那一行会编译报错。String的overLoad和double[]的overLoad都可以匹配，但是两者在继承属上是平行的，因此编译器也不知道到底该调用哪一个重载方法。另外这段代码还说明了一个问题：重载是在编译期就已经确定了的，并不需要等到运行时才能确定。这也是为什么说它不是多态的一个原因。</p>

<p>还有下面一段代码作为佐证：</p>

<pre><code>import java.util.ArrayList;
import java.util.List;

public class OverridePuzzle {

    private void overloadList(List list){
        System.out.println("List arguement method.");
    }

    private void overloadList(ArrayList arrayList){
        System.out.println("ArrayList arguement method");
    }
    public static void main(String[] args) {
        OverridePuzzle op = new OverridePuzzle();
        List list = new ArrayList&lt;String&gt;();
        op.overloadList(list);
    }

}
</code></pre>

<p>程序输出：<strong>List arguement method.</strong>。显然这里重载对于传入的参数类型只认了引用的类型，并没有去解析实际对象的类型。如果重载是一种多态的话，它这里应该去解析实际对象的类型并调用ArrayList的方法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java垃圾回收机制四  Monitoring and Analyzing Java Garbage Collection]]></title>
    <link href="http://youli9056.github.io/blog/monitoring-and-analyzing-java-garbage-collection/"/>
    <updated>2014-11-05T13:20:34+08:00</updated>
    <id>http://youli9056.github.io/blog/monitoring-and-analyzing-java-garbage-collection</id>
    <content type="html"><![CDATA[<p>在这篇Java垃圾回收系列文章中，让我们看下一些监控和分析垃圾回收的工具。然后用工具尝试监控和分析一个例子。初学者最好先看下<a href="/blog/categories/gc/">此系列</a>,从<a href="/blog/java-garbage-collection-introduction">Java 垃圾回收简介</a>开始吧。</p>

<h2>Java垃圾回收监控和分析工具</h2>

<p>下面是一些监控工具，它们有各自的优缺点。我们可以通过选择恰当的工具做一些有序的分析工作来提升应用性能。这篇文章将从Java VisualVM开始讲起。</p>

<ul>
<li>Java VisualVM</li>
<li>Naarad</li>
<li>GCViewer</li>
<li>IBM Pattern Modeling and Analysis Tool for Java Garbage Collector</li>
<li>HPjmeter</li>
<li>IBM Monitoring and Diagnostic Tools for Java &ndash; Garbage Collection and Memory</li>
<li>Visualizer</li>
<li>Verbose GC Analyzer</li>
</ul>


<h2>Java VisualVM</h2>

<p>Java VisualVM是在Java SE SDK安装时免费提供的。看下你的Java JDK安装目录下的<code>/bin</code>目录，<code>\Java\jdk1.8.0\bin</code>。此目录下有许多其他工具包括javac和java工具，jvisualvm就是其中一个。</p>

<!--more-->


<p>Java VisualVM对运行中的Java应用提供了可视化的信息展示。它是很多工具的整合包，像工具JConsole,jstat,jinfo,jstack以及jmap现在都是Java VisualVM的一部分。</p>

<p>Java VisualVM可以用来
- 生成和分析堆内存的dump
- 观察和操作MBeans
- 监控垃圾回收
- 内存和CPU性能分析</p>

<h3>1. Launch VisualVM</h3>

<p><code>jvisualvm</code>已经包含在了JDK的bin目录下,如果以设置环境变量path，则可以直接在命令行中运行<code>jvisualvm</code>，将出现如下启动界面</p>

<p><img src="/images/monitoringandanalysisgc/Start-Java-VisualVM.png" alt="starting jvisualvm" /></p>

<p><img src="/images/monitoringandanalysisgc/Java-VisualVM.png" alt="jvisualvm view" /></p>

<h3>2.安装Visual GC插件</h3>

<p>我们需要安装visual GC 插件才能有个堆Java GC线程的漂亮和有价值的视觉感受。在上面的启动界面中点击工具->插件->可用插件->Visual GC</p>

<p><img src="/images/monitoringandanalysisgc/Visual-GC-Plugin.png" alt="visual gc" /></p>

<p>安装。</p>

<h3>3. 监控GC</h3>

<p>现在可以监控<a href="/blog/java-gc-yuan-li/">垃圾回收</a>过程了。开启你的Java应用程序，Java VisualVM会自动检测并将其显示到界面上。在左边“应用程序”面板的“本地”节点下面，所有本地运行的Java应用都会被列举出来。</p>

<p>Java VisualVM自己本身也是一个Java应用程序，因此它自身也被列了出来。作为本文的目的我们将监控VisualVM应用本身的GC过程。</p>

<p>双击“本地”节点下的VisualVM图标。</p>

<p><img src="/images/monitoringandanalysisgc/GC-Analysis.jpg" alt="visualvm gc" /></p>

<p>这样应用程序的监控面板会在右边打开。面板上有多个标签，每个里面展示了与应用程序性能相关的方面。由于我们现在主要关注“Visual GC”，so，点之。</p>

<p><img src="/images/monitoringandanalysisgc/Heap-Memory-Space-Allocation.png" alt="Heap Memory Space Allocation" /></p>

<p>上面的图片显示了Old，Eden，S0，S1使用的内存空间。下面的图表显示了各个部分申请和释放内存的详细信息。它以设定的刷新频率不停地跟新。</p>

<p><img src="/images/monitoringandanalysisgc/GC-Graphs.png" alt="gc graph" /></p>

<p>上图显示的是一个正常运行的程序。当发生内存泄露或者不正常的操作时，可以从图形本身明显地看出来。至少我们可以知道程序中存在和对象内存分配和垃圾回收相关的问题。然后利用其他标签如“Threads”中提供的信息和Thread Dump我们可以缩小发生问题的范围。</p>

<p>在“监视”标签中，我们可以看到以时间线发展的内存使用概况图。这里有个“执行垃圾回收”按钮可以调用垃圾回收过程。
<img src="/images/monitoringandanalysisgc/Perform-GC.png" alt="perform gc" /></p>

<p>在“抽样器”标签中我们可以开始内存和CPU分析工作。抽样器会实时显示各个实例的使用情况。它可以帮助确定性能问题到底发生在哪里。</p>

<p><img src="/images/monitoringandanalysisgc/Instances-Memory-Allocation.png" alt="instance memory allocation" /></p>

<p>到此为止，关于<a href="/blog/categories/gc/">Java 垃圾回收的系列文章</a>已经完结了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java垃圾回收机制三  Types of Java Garbage Collectors]]></title>
    <link href="http://youli9056.github.io/blog/types-of-java-garbage-collectors/"/>
    <updated>2014-11-05T11:07:33+08:00</updated>
    <id>http://youli9056.github.io/blog/types-of-java-garbage-collectors</id>
    <content type="html"><![CDATA[<p>本文是Java垃圾回收系列的第三篇，非原创，翻译自<a href="http://javapapers.com/java/types-of-java-garbage-collectors/">Types of Java Garbage Collectors</a>。如果没有相应基础的话，阅读本文前建议先阅读前两篇<a href="/blog/java-garbage-collection-introduction/">Java Garbage Collection Introduction</a>(介绍了JVM的架构，堆内存模型和周边相关的Java术语)和<a href="/blog/java-gc-yuan-li/">How Java Garbage Collection Works?</a>(概况介绍了GC是如何工作的)</p>

<p>本文将会介绍各种不同类型的Java垃圾回收器。垃圾回收是Java用来将程序员从分配和释放内存的琐事中解放出来的自动过程。</p>

<p>Java有四种类型的垃圾回收器，</p>

<ol>
<li><a href="/blog/types-of-java-garbage-collectors/#serial-garbage-collector">Serial Garbage Collector</a></li>
<li><a href="/blog/types-of-java-garbage-collectors/#parallel-garbage-collector">Parallel Garbage Collector</a></li>
<li><a href="/blog/types-of-java-garbage-collectors/#cms-garbage-collector">CMS Garbage Collector</a></li>
<li><a href="/blog/types-of-java-garbage-collectors/#g1-garbage-collector">G1 Garbage Collector</a></li>
</ol>


<p><img src="/images/typesofjavagarbagecollectors/Types-of-Java-Garbage-Collectors3_th_thumb.jpg" alt="各种类型的Java垃圾回收器" /></p>

<!--more-->


<p>这四种类型的垃圾回收器都有各自的优点和缺点。最重要的是程序员可以选择JVM使用哪种类型的垃圾回收器。我们可以通过传递不同的JVM参数来设置使用哪一个。各个垃圾回收器在不同应用场景下的效率会有很大的差异。因此了解各种不同类型的垃圾回收器以及它们的应用场景是非常重要的。</p>

<h2>1. <span id="serial-garbage-collector">Serial Garbage Collector</span></h2>

<p>串行垃圾回收器控制所有的应用线程。它是为单线程场景设计的，只使用一个线程来执行垃圾回收工作。它暂停所有应用线程来执行垃圾回收工作的方式不适用于服务器的应用环境。它最适用的是简单的命令行程序。</p>

<p>使用<code>-XX:+UseSerialGC</code>JVM参数来开启使用串行垃圾回收器。</p>

<h2>2.<span id="parallel-garbage-collector"> Parallel Garbage Collector</span></h2>

<p>并行垃圾回收器也称作基于吞吐量的回收器。它是JVM的默认垃圾回收器。与Serial不同的是，它使用多个线程来执行垃圾回收工作。和Serial回收器一样，它在执行垃圾回收工作是也需要暂停所有应用线程。</p>

<h2>3.<span id="cms-garbage-collector"> CMS Garbage Collector</span></h2>

<p>并发标记清除(Concurrent Mark Sweep,CMS)垃圾回收器，使用多个线程来扫描堆内存并标记可被清除的对象，然后清除标记的对象。CMS垃圾回收器只在下面这两种情形下暂停工作线程，</p>

<ol>
<li>在老年代中标记引用对象的时候</li>
<li>在做垃圾回收的过程中堆内存中有变化发生</li>
</ol>


<p>对比与并行垃圾回收器，CMS回收器使用更多的CPU来保证更高的吞吐量。如果我们可以有更多的CPU用来提升性能，那么CMS垃圾回收器是比并行回收器更好的选择。</p>

<p>使用<code>-XX:+UseParNewGC</code>JVM参数来开启使用CMS垃圾回收器。</p>

<h2>4.<span id="g1-garbage-collector"> G1 Garbage Collector</span></h2>

<p>G1垃圾回收器应用于大的堆内存空间。它将堆内存空间划分为不同的区域，对各个区域并行地做回收工作。G1在回收内存空间后还立即堆空闲空间做整合工作以减少碎片。CMS却是在全部停止(stop the world,STW)时执行内存整合工作。对于不同的区域G1根据垃圾的数量决定优先级。</p>

<p>使用<code>-XX:UseG1GC</code>JVM参数来开启使用G1垃圾回收器。</p>

<p><strong>Java 8 的优化</strong></p>

<p>在使用G1垃圾回收器是，开启使用<code>-XX:+UseStringDeduplacaton</code>JVM参数。它会通过把重复的String值移动到同一个char[]数组来优化堆内存占用。这是<em>Java 8 u 20</em>引入的选项。</p>

<p>以上给出的四个Java垃圾回收器，在什么时候使用哪一个去决于应用场景，硬件配置和吞吐量要求。</p>

<h2>Garbage Collection JVM Options</h2>

<p>下面是些主要的与Java垃圾回收相关的JVM选项。</p>

<h3>Type of Garbage Collector to run</h3>

<table>
<thead>
<tr>
<th>选项</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-XX:+UseSerialGC</td>
<td>串行垃圾回收器</td>
</tr>
<tr>
<td>-XX:+UseParallelGC</td>
<td>并行垃圾回收器</td>
</tr>
<tr>
<td>-XX:+UseConcMarkSweepGC</td>
<td>CMS垃圾回收器</td>
</tr>
<tr>
<td>-XX:ParallesCMSThread=</td>
<td>CMS垃圾回收器&ndash;使用的线程数量</td>
</tr>
<tr>
<td>-XX:UseG1GC</td>
<td>G1垃圾回收器</td>
</tr>
</tbody>
</table>


<h3>GC 优化选项</h3>

<table>
<thead>
<tr>
<th>选项</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-Xms</td>
<td>初始堆内存大小</td>
</tr>
<tr>
<td>-Xmx</td>
<td>最大堆内存大小</td>
</tr>
<tr>
<td>-Xmn</td>
<td>年轻代的大小</td>
</tr>
<tr>
<td>-XX:PermSize</td>
<td>初始永久代的大小</td>
</tr>
<tr>
<td>-XX:MaxPermSize</td>
<td>最大的永久代的大小</td>
</tr>
</tbody>
</table>


<h3>Example Usage of JVM GC Options</h3>

<pre><code>java -Xmx12m -Xms3m -Xmn1m -XX:PermSize=20m -XX:MaxPermSize=20m -XX:+UseSerialGC -jar java-application.jar
</code></pre>

<p>在垃圾回收系列的<a href="/blog/monitoring-and-analyzing-java-garbage-collection/">下一篇</a>中，将通过一个例子介绍如何区监控和分析垃圾回收。</p>
]]></content>
  </entry>
  
</feed>
