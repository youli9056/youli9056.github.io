<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: basics | 秦风汉雨]]></title>
  <link href="http://youli9056.github.io/blog/categories/basics/atom.xml" rel="self"/>
  <link href="http://youli9056.github.io/"/>
  <updated>2014-11-06T21:17:10+08:00</updated>
  <id>http://youli9056.github.io/</id>
  <author>
    <name><![CDATA[You Li]]></name>
    <email><![CDATA[youli9056@126.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[接口和抽象类的区别  Diference Between Interface and Abstract Class]]></title>
    <link href="http://youli9056.github.io/blog/diference-between-interface-and-abstract-class/"/>
    <updated>2014-11-06T18:03:19+08:00</updated>
    <id>http://youli9056.github.io/blog/diference-between-interface-and-abstract-class</id>
    <content type="html"><![CDATA[<p>面试过程中经常会被问道Java中接口和抽象类有什么区别，总觉得自己总结不好，也不全面。正好这里<a href="http://javapapers.com/core-java/abstract-and-interface-core-java-2/difference-between-a-java-interface-and-a-java-abstract-class/">有篇文章</a>感觉写得很好。下面是内容。</p>

<ol>
<li><p>接口最主要的不同是，接口默认是抽象的，本身不能有任何实现。抽象类可以有为子类提供的默认实例方法。</p></li>
<li><p>接口中的变量默认是final的。抽象类可以包含非final的变量。</p></li>
<li><p>接口的成员默认是public的。抽象类可以有任意类型的成员，private，protected都可以。</p></li>
<li><p>实现接口需要用implements关键字。继承抽象类用extends关键字。</p></li>
<li><p>接口继承一个或者多个接口，但是不能继承或实现任意抽象抑或者实体类。抽象类可以继承另外一个Java类同时还可以实现多个Java接口。</p></li>
<li><p>一个Java类可以实现多个接口，但是只能继承一个抽象类。</p></li>
<li><p>接口是完全抽象的，不能够实例化。抽象类也是不能被实例化的，但是如果其中有main()方法时，还是可以调用。</p></li>
<li><p>和抽象类相比，接口定义的引用在具体执行时由于需要做额外的间接寻址工作因此会慢些。(执行时需要通过搜索具体类的实现方法)</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入理解重载和重写及与之相关的多态性  Overloading and overriding]]></title>
    <link href="http://youli9056.github.io/blog/overloading-and-overriding/"/>
    <updated>2014-11-05T16:03:56+08:00</updated>
    <id>http://youli9056.github.io/blog/overloading-and-overriding</id>
    <content type="html"><![CDATA[<p>本文分割线之前非原创，翻译自<a href="http://javapapers.com/core-java/overloading-and-overriding/">Overloading and overriding</a>.</p>

<p>重载和重写除了在名称上有些相似之外，其实是完全不同的两个东西。</p>

<p>重载的目的是使得我们能够用用一个统一的接口名称来调用一系列方法。这些方法的目的也许是一样的，但是它们的实现方式会根据传入的参数不同而不同。</p>

<p>重写涉及到继承这个概念中的问题。子类继承了父类的方法，但是它可能需要有不同的操作行为，这时候就需要在子类中重写这个父类方法。</p>

<p>重载本身并不是多态，同时运行时绑定重载方法也不是多态的表现。它们以及一些其他的东西都是其面向对象多态性的使用（原文：All these and more are used to exercise the object oriented property polymorphism.总感觉翻译不要，故贴上来）。</p>

<h2>重载和重写的关键点</h2>

<ul>
<li>private： 一个私有的java方法是不能被重写的，因为它对子类压根就不可见</li>
<li>final：重载一个final的方法是可以的，但是不能重写它，因此父类如果将方法声明为final的就可保证所有子类的调用此方法时调用的都是父类的方法。</li>
<li>final：如果两个方法有同样的参数列表，而其中一个的参数被声明为final的这种情况下这两个方法完全一样，因此不可重载。编译都通不过，因为这两个方法被视为完全一样。</li>
<li>static：可以重载一个静态的Java方法但是不能重写静态的Java方法，因为静态方法在方法区中只有一个。</li>
<li>static：重载是关于对象(实例）和继承而言的。一个声明为静态的方法属于整个类(对于这个的所有对象都是一样的)。因此重写它没有任何意义。</li>
<li>static：对于重载，两个静态方法的重载没有什么特别的，只不过是修饰符多了个static修饰符。参数列表依然必须不同。</li>
</ul>


<!--more-->


<h2>重载</h2>

<p>让我们来详细讨论下重载。在各种网站上我看到了大量的重载的例子。它们向类中添加更多的属性、方法，把它变得看起来更庞大作为重载的象征。事实上正确的方式是，当我们使用重载时外部看起来我们的类会变得更加紧凑。</p>

<p><img src="/images/overloadingandoverriding/beforeoverloading.png" alt="重载之前" /></p>

<p>这里贴出来两个图片，第一张里面是印度的古典乐器脚踏式风琴，它是现代钢琴的鼻祖。另一幅图片是现代的电子琴。在我们的重载语境中，古典风琴是重载之前，电子琴是重载之后。</p>

<p><img src="/images/overloadingandoverriding/afteroverloading.png" alt="重载之后" /></p>

<h3>Java Example for Method Overloading</h3>

<hr />

<pre><code>public class OverloadingExample {
    public static void main(String args[]){
        System.out.println(playMusic("C sharp","D sharp"));
        System.out.println(playMusic("C","D flat","E flat"));
    }
    public static String playMusic(String c, String d){
        return c+d;
    }
    public static String playMusic(String c, String d, String e){
        return c+d+e;
    }
}
</code></pre>

<h3>Java Overloading Puzzle</h3>

<hr />

<pre><code>package com.javapapaer.java;

public class NullArguementOverloading {
    public static void main(String[] args) {
        NullArguementOverloading obj = new NullArguementOverloading();
        obj.overLoad(null);
    }
    private void overLoad(Object o){
        System.out.println("Object o arguement method.");
    }
    private void overLoad(double[] dArray){
        System.out.println("Double array argument method.");
    }
}
</code></pre>

<p>猜一猜，上面的输出是啥？</p>

<h3>Overriding  重写</h3>

<hr />

<p>当继承一个类的时候,根据父类方法的访问修饰符子类可以获得所有protect以上的父类方法。但是父类的方法的具体行为可能在子类中并不适合，因此我们需要根据子类对于这个方法的需求重写继承自父类的这个方法。重写后原来的旧方法对于这个子类会完全废弃。</p>

<p>看看下面这个猛兽皮卡，因为需求不同了，原来又小又旧的轮子被换成了巨无霸。这就是现实生活中的重写。</p>

<p><img src="/images/overloadingandoverriding/Overriding.png" alt="Overriding" /></p>

<h3>Overriding in Java/JDK</h3>

<p>在Java中默认所有对象都是继承自Object类。Object有个叫<em>equals</em>的方法，在String类中重写了它的默认行为。String中通过比较传入的对象与本身保存的字符串序列一一对比看是否相等。</p>

<h1>分割线～～～～～～～～～～～～～～～～～～～～～～～</h1>

<hr />

<p>关于上面Overloading Puzzle，以免强迫症患者费心敲代码在此给出答案和解释。</p>

<p>程序输出：<strong>Double array argument method.</strong></p>

<p>原因是Java对于重载的处理有个最精确原则。Object和double[]都可以和null匹配，但是两者对比而言，double[]比Object匹配得更精确，所以调用了下面的overLoad方法。如果想让程序调用Object的overLoad方法则需要一个强制类型转换<code>obj.overLoad((Object)null);</code>这样Object的overLoad就要比double[]的更精确,会输出<em>Object o arguement method.</em>。</p>

<p>下面这段代码也许理解起来会更清晰一些，ArrayList继承自List：</p>

<pre><code>import java.util.ArrayList;
import java.util.List;

public class OverridePuzzle {

    private void overloadList(List list){
        System.out.println("List arguement method.");
    }

    private void overloadList(ArrayList arrayList){
        System.out.println("ArrayList arguement method");
    }
    public static void main(String[] args) {
        OverridePuzzle op = new OverridePuzzle();
        op.overloadList(null);
    }

}
</code></pre>

<p>那么它将输出:<strong>ArrayList arguement method</strong>，因为ArrayList比List匹配得更精确。</p>

<p>那又要问了，如果上文的NullArguementOverloading代码中还有个overLoad方法如下：</p>

<pre><code>private void overLoad(String str) {
    System.out.println("String argument method.");
}
</code></pre>

<p>那么程序会怎样呢？答案是main函数<code>obj.overLoad(null)</code>那一行会编译报错。String的overLoad和double[]的overLoad都可以匹配，但是两者在继承属上是平行的，因此编译器也不知道到底该调用哪一个重载方法。另外这段代码还说明了一个问题：重载是在编译期就已经确定了的，并不需要等到运行时才能确定。这也是为什么说它不是多态的一个原因。</p>

<p>还有下面一段代码作为佐证：</p>

<pre><code>import java.util.ArrayList;
import java.util.List;

public class OverridePuzzle {

    private void overloadList(List list){
        System.out.println("List arguement method.");
    }

    private void overloadList(ArrayList arrayList){
        System.out.println("ArrayList arguement method");
    }
    public static void main(String[] args) {
        OverridePuzzle op = new OverridePuzzle();
        List list = new ArrayList&lt;String&gt;();
        op.overloadList(list);
    }

}
</code></pre>

<p>程序输出：<strong>List arguement method.</strong>。显然这里重载对于传入的参数类型只认了引用的类型，并没有去解析实际对象的类型。如果重载是一种多态的话，它这里应该去解析实际对象的类型并调用ArrayList的方法。</p>
]]></content>
  </entry>
  
</feed>
