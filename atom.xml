<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[秦风汉雨]]></title>
  <link href="http://youli9056.github.io/atom.xml" rel="self"/>
  <link href="http://youli9056.github.io/"/>
  <updated>2014-11-13T22:57:35+08:00</updated>
  <id>http://youli9056.github.io/</id>
  <author>
    <name><![CDATA[You Li]]></name>
    <email><![CDATA[youli9056@126.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[love you baby]]></title>
    <link href="http://youli9056.github.io/blog/love-you-baby/"/>
    <updated>2014-11-13T22:54:41+08:00</updated>
    <id>http://youli9056.github.io/blog/love-you-baby</id>
    <content type="html"><![CDATA[<h1><strong>LOVE YOU MY DEAR BABY &ndash; PJM</strong></h1>

<h1><strong>PLEASE BE HAPPY</strong></h1>

<h1><strong>DON&rsquo;T BE WORRY</strong></h1>

<h1><strong>EVERYTHING IS GOING TO BE OKAY</strong></h1>

<pre><code>*from yuri*
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hadoop MapReduce中的负载均衡问题二  详细分析及现有方案  Analyzing Load Balancing on Hadoop]]></title>
    <link href="http://youli9056.github.io/blog/analyzing-load-balancing-on-hadoop/"/>
    <updated>2014-11-12T16:18:21+08:00</updated>
    <id>http://youli9056.github.io/blog/analyzing-load-balancing-on-hadoop</id>
    <content type="html"><![CDATA[<p>在<a href="http://youli9056.github.io/blog/load-balancing-on-hadoop-mapreduce/">上一篇文章</a>中，简要介绍了<a href="http://youli9056.github.io/blog/load-balancing-on-hadoop-mapreduce/">负载均衡问题</a>，及其在Hadoop MapReduce平台中的表现。本文将进行详细分析，并介绍一些解决方案。</p>

<h2>一、倾斜类型</h2>

<ol>
<li><p>数据倾斜</p>

<p> 输入数据分布不均，有些节点处理的数据远大于其他节点。可能会出现下面的情况，有个Join操作（reduce端join）输出数据量的大小</p></li>
</ol>


<p><img src="http://youli9056.github.io/images/analyzingloadbalancing/reducesidejoin.png" alt="reduce side join output" /></p>

<ol>
<li><p>计算倾斜</p>

<p> 运算的复杂度与输入的数据量关系不大，而取决于输入数据的特性。例如，PageRank这样的算法，一个节点的计算复杂度是于这个节点的出度有关，即使分配到一个计算节点上的数据相等，它们的实际运算时间由于度数的差别，还是会出现类似下图这样的情况。</p></li>
</ol>


<p><img src="http://youli9056.github.io/images/analyzingloadbalancing/computeunbalance.png" alt="compute unbalance" /></p>

<h2>二、解决方案</h2>

<p>两种倾斜方式中数据倾斜看起来会比较容易理解些，其实也是较易解决的。而计算倾斜发生得也很频繁，且情况更严重，解决起来也比较麻烦。解决方法整体上有两种分类：静态负载均衡，动态负载均衡。</p>

<h3>2.1 静态负载均衡</h3>

<p>严格意义上讲，静态负载均衡大多是进行算法优化，改变用户程序，使得整个作业的执行时间尽可能降低。这样的负载均衡一般都是需要对于当前的作业任务、输入数据特征和各个机器节点资源有先验知识。作业开始运行前，哪块数据在哪里进行计算都是可预测的，或者说是确定的，不管运行多少次都是这样一个状态。Hadoop提供的Partition接口就可以看做是一种静态负载均衡。下图展示了一个静态负载均衡的效果。</p>

<p><img src="http://youli9056.github.io/images/analyzingloadbalancing/staticloadbalance.png" alt="static load banlance" /></p>

<p>静态均衡很难用来解决计算倾斜的情形。大量的输入数据，想对每个分块的数据做计算量的估计是一个十分繁复且巨大的工作，而且没有通用性。</p>

<h3>2.2 动态负载均衡</h3>

<p>Hadoop平台中以Slot作为计算资源的分配单位，map任务和reduce任务都是运行在Slot上。Slot可以理解为单位计算资源，与cpu对应。由于存在数据倾斜或者计算倾斜每个任务的运行时间不同，可能会出现某个Slot已经完成任务空闲了，其他的Slot上还有大量的任务没有完成。显而易见，如果此时能够把其他Slot的任务放到这个Slot上来运行会大大提高系统的资源使用率，同时能够提升任务的处理效率及系统的吞吐量。相比于静态负载均衡，动态的均衡有多个优点。它不需要改变用户自己的应用代码，也不要针对不同的输入数据做算法定制优化，系统能够自动地完成均衡工作。</p>

<p>动态均衡还有个优点，它可以用来解决计算倾斜的问题。动态均衡关注的是Slot的空闲与否，可以在运行时根据当前运行状况做出负载分配决策。</p>

<p>相对而言动态均衡比静态均衡更难实现些，为了实现任务间的数据迁移工作需要增加任务间的数据传输模块及其他辅助功能。</p>

<h3>2.3 关键技术</h3>

<p>负载均衡过程中涉及到三个基本问题：Which，Where，How。</p>

<p>Which&ndash; 目前系统中哪个节点的任务被当做Straggler，谁的任务重，需要被迁移。</p>

<p>Where&ndash; 系统中哪个节点任务轻，可以多承担些工作，将重的任务迁移到这里。</p>

<p>How&ndash; Straggler节点的任务如何迁移到空闲节点中去，而且保证系统的一致性、正确性。</p>

<p><strong>静态</strong></p>

<p>静态Which：对输入数据进行采样，分析作业，估算每个部分的代价（归约到时间运行值）超出均值的那些块为Straggler。</p>

<p>静态Where：估值低于均值的块为要迁移任务到的空闲点。</p>

<p>静态How：类似背包问题，但分配目标是各个背包的估计代价方差最小。</p>

<p><strong>动态</strong></p>

<p>动态Which：目前系统中出现空Slot时，正在运行的task都可以作为Straggler。从其中挑选一个作为Straggler，如何挑选也是通过代价估计。</p>

<p>动态Where：即当前空闲的Slot，将任务迁移到这个Slot。</p>

<p>动态How：
    A. 直接法：选择当前系统运行中task剩余时间最长的为Straggler，考虑迁移时间，使Straggler和空闲节点处理迁移任务的时间一致。
    B. 迭代法：考虑系统I/O问题，选择当前在同一个机器上的剩余时间最长的task为straggler，切分一半计算量到空闲节点；本地不够分再向其他机器请求切分。</p>

<p><img src="http://youli9056.github.io/images/analyzingloadbalancing/dynamicdemo.png" alt="dynamic demo" /></p>

<p>大概就像这样。</p>

<h2>三、代价估计模型</h2>

<p>上面提到的两种方案都需要有个代价估计，一半都是以计算时间作为标量。我们一般使用代价估计模型将不同的应用及对应的数据来将具体的作业情况做代价估计。</p>

<h3>3.1 Map task估计</h3>

<h3>3.2 Reduce task估计</h3>

<h3>3.3 具体设计</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hadoop MapReduce中的负载均衡问题 Load Balancing on Hadoop MapReduce]]></title>
    <link href="http://youli9056.github.io/blog/load-balancing-on-hadoop-mapreduce/"/>
    <updated>2014-11-08T11:34:58+08:00</updated>
    <id>http://youli9056.github.io/blog/load-balancing-on-hadoop-mapreduce</id>
    <content type="html"><![CDATA[<p>做了一段时间的Hadoop中的负载均衡问题，此文谨当做对那段时间的总结。</p>

<h2>一、负载均衡 &ndash; 一个广泛而普遍存在的问题</h2>

<p>负载均衡问题是一个广泛而普遍存在的问题。在所有的分布式系统中几乎都会提及到“长尾问题(Long Tail Problem)”，其实也就是大家常说的“短板理论”，系统的整体表现取决于表现最差的一部分。常见的分布式系统如分布式缓存，分布式存储，分布式计算，分布式数据库等等，都存在这个问题。分布式缓存中可能会遇到短时间内集中访问同一个缓存的情况；分布式存储可能单机磁盘使用过度；分布式计算可能会有单点的计算负担过重；分布式数据库可能会有单机访问量过大。如此总总，只要是分布的，想完全端平一碗水几乎是不大可能的。</p>

<p>在此，总结我对负载均衡的定义：在多点协作的系统中由于不合理的任务分配导致某个或者少量的某些节点处理负担过重，最终拖延整个系统对外的响应效率。</p>

<p>负载均衡的解决思路主要有：</p>

<pre><code>1. 被动解决，发现负载倾斜后，将负载迁移到空闲节点
2. 主动预防，防止倾斜的发生
    2.1 系统任务分配方式主动预防
        2.1.1 静态负载均衡
        2.1.2 动态负载均衡
    2.2 用户先验知识的介入
</code></pre>

<p>负载均衡问题的解决在大多数情况下是存在一个极限的，这取决于具体问题的可划分性(<a href="http://youli9056.github.io/blog/load-balancing-on-hadoop-mapreduce/#upbound">2.2中对此有讨论</a>)。
分布式系统的负载均衡问题已经研究了多年了，有些问题早有了较成熟的解决方案，像分布式缓存系统中常见的一致性哈希算法等。在这里主要讨论的是分布式计算平台Hadoop里的负载均衡问题。</p>

<p><a href="http://youli9056.github.io/blog/analyzing-load-balancing-on-hadoop/">后文</a>会对这几种方式一一讨论，下面先对本文的主要讨论对象Hadoop的背景做个简要介绍。</p>

<!--more-->


<h2>二、Hadoop &ndash; 时代的宠儿</h2>

<p>Hadoop自推出以后在互联网快速发展的背景下得到了许多公司的认可，已然成为大数据的基础处理平台甚至是行业标准。Facebook，Amazon，Yahoo等等公司都在自己的系统中构建了基于Hadoop的处理平台。除了最基本的数据处理功能，在Hadoop之上现在已经发展出来一套生态系统，应用最广泛的莫过于Hive和HBase了。在Hadoop之上构建的系统都直接或间接地使用了了Hadoop的分布式存储模块HDFS和计算模块MapReduce。本文的问题关注计算模块MapReduce的均衡问题。</p>

<h3>2.1 HDFS</h3>

<p>HDFS借鉴的是Google的GFS系统，是一个基于Key/Value的分布式存储系统。HDFS是为了大文件、一次写多次读的应用场景而设计的。所有要存储在HDFS中的文件需要按块（默认64M）切分，每个数据块有在不同的机器上（默认是本机，本机架，不同机架）有多个备份（默认为3份）。系统通过对失败机器数据文件的再分配、复制来自动保证文件的数据安全。HDFS并不适合大量小文件或者对写要求高的场景。这样，我们可以有个概念，Hadoop中处理的数据会分块备份三分存在不同的机器上。</p>

<p>HDFS本身也存在负载均衡问题，这个负载的均衡主要只每台机器的磁盘使用率。假如有一台机器存储了大量的数据，而其他机器存储了很少，这就是一个倾斜的情形。HDFS的存储倾斜不仅仅只影响到磁盘使用情况，同时由于Hadoop的Map的执行依赖于输入数据在磁盘上的分布情况（Hadoop期望达到最好的数据本地化处理）它也影响到Map计算过程中的均衡。HDFS存储的不均很有可能导致Map计算的分布不均（注意是有可能，因为HDFS上的输入数据有多个备份，Map的输入只需要一份备份，因此不一定会导致Map计算不均）。</p>

<p>对于HDFS的倾斜问题，Hadoop本身提供了一套机制来限制不均衡的程度。Hadoop自带的工具<code>bin/start-balancer.sh</code>可以通过参数指定系统中均衡的标准如10%，这就保证了系统中磁盘的使用率的偏差在10%之内。如果超过了这个值，系统将自动执行数据块的重分布工作使之达到偏差限额。</p>

<h3>2.2 MapReduce</h3>

<p>MapReduce是Hadoop的数据处理模块，算是函数式编程的巅峰之作了吧。Hadoop对数据的处理都被抽象成Map和Reduce这两个函数的操作。</p>

<h4>Map</h4>

<p>通常地，Map函数的工作是从HDFS中读取上输入文件，读入的数据是一个个（MapInputKey/MapInputValue）对，根据作业需求处理后输出一个个（MapOutputKey/MapOutputValue)对，后台的输出线程会把输出的文件按照MapOutputKey把对应的MapOutputValue合并起来（MapOutputKey&ndash;>MapOutputValue0,MapOutputValue1,&hellip;)，同时还会将输出按照MapOutputKey排序（注意，每一个Map都会有同样的样的输出，不同的Map会有同样的Key值输出）。逻辑上，我们可以将不同Map输出的同一个Key的数据合起来看做一个小Partition（Finer Partition，FP）。</p>

<h4>Shuffle</h4>

<p>Shuffle被称为Hadoop的核心，但是对应一般用户并不会涉及到这部分的细节。系统提供一个Partition接口使得用户可以决定Map的输出Key该如何聚合（比如想把Key为奇数的FP放在一起，把偶数放在一起）。Shffle的主要工作是将各个Map的FP的各部分按照用户指定的方式将数据从Map的输出端拷贝到对应的Reduce执行端。</p>

<p>在大多数研究中Shuffle的倾斜问题都没有具体考虑，事实上Shuffle这个过程本身也是存在倾斜问题的。主要原因是各个机器上运行的reduce任务的处理数据量的不均。各个机器上运行的Reduce都要从Map端拷贝相应数据，如果这些要拷贝的数据在本地的话那么必然会拷贝得快些（虽然对于本地数据Hadoop的Shuffle还是使用的Http协议向本地Servlet请求下载）；另一方面，一台机器上有多个Reduce在同时下载数据，这台机器的网卡速度及磁盘读写能力都成为这台机器上的Shuffle过程的瓶颈因素。</p>

<p>然而Shuffle这部分倾斜被忽略并不是没有道理的。从企业生产的角度，我们并不关心单个机器的处理时间、通信量。事实上我们最关注的是，对于提交任务的用户而言有最快的响应速度；对整个系统集群而言网络通信量最小，单位时间内处理的任务最多。Shuffle的倾斜问题是中间的一个过渡状态，它是由Map数据的输出不均、任务分配不均导致的；同时它也有可能导致最终Reduce的任务处理时间差异。Shuffle过程中的倾斜并不一定导致最终的倾斜，相反在有些推测执行任务出现的时候，Shuffle的不均有可能还会提升最终性能表现。</p>

<p>总之，Shuffle的均衡既不是目标，也不是高性能的必要条件，因此对于这部分的研究意义不大。</p>

<h4>Reduce</h4>

<p>Reduce将Map输出的各个FP拷贝到本地(拷贝过程中还是保证键值对的有序性)，然后对于每个键值对序列(ReduceInputKey&ndash;> ReduceInputValue0，ReduceInputValue1&hellip;)做处理。对于MapReduce模型本身，如果要保证计算的正确性，我认为至少要保证的是：</p>

<blockquote><p>单独一个键的FP必须要保证完整的拷贝到同一台机器上。而不是看起来的，同一个Hash值对应到的Partition的多个键的FP数据要保证到同一台机器上。</p></blockquote>

<p>多数计算中即使多个键的FP被Shuffle到同一台机器上，处理时我们还是每次以一个键的FP作为独立的计算输入单元。因此，我们在写MapReduce程序时，应当需要注意的是：</p>

<p><span id="upbound"></p>

<blockquote><p>不应当将程序计算的正确性依赖于Partition函数的实现，而只应将Partition函数作为一个提升系统数据均衡性的用户接口。
</span></p></blockquote>

<p>上面这一点也是我们下面提出的各种负载均衡算法的基本依据。如果用户程序不满足上的条件，那么对于这种应用只能做Reduce任务分配级别的均衡，再低层的均衡会影响程序的正确性。而这种问题，Hadoop本身的推测执行机制基本能够满足需求，因此下文不做讨论。这也是均衡算法的能达到的上界(单个Key的FP是Reduce输入数据的最小不可分单元)。在此，下面都假设用户作业满足上面的条件。</p>

<h2>结束语</h2>

<p>本来准备继续写的，但是一篇博文过长感觉不太好，本文先到这里结束。文章简要介绍了负载均衡问题，并针对Hadoop平台上各个部分的运行机制分析了各个部分出现倾斜的情况。指出Hadoop平台上的负载均衡问题重点在Reduce部分。<a href="http://youli9056.github.io/blog/analyzing-load-balancing-on-hadoop/">下一篇将详细分析Hadoop倾斜发生的原因及解决方案</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java(JVM)内存类型详解  Java(JVM) Memory Types]]></title>
    <link href="http://youli9056.github.io/blog/java-jvm-memory-types/"/>
    <updated>2014-11-07T22:46:35+08:00</updated>
    <id>http://youli9056.github.io/blog/java-jvm-memory-types</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java为何不支持多继承  Why Multiple Inheritance is Not Supported in Java]]></title>
    <link href="http://youli9056.github.io/blog/why-multiple-inheritance-is-not-supported-in-java/"/>
    <updated>2014-11-06T21:43:11+08:00</updated>
    <id>http://youli9056.github.io/blog/why-multiple-inheritance-is-not-supported-in-java</id>
    <content type="html"><![CDATA[<p>原文：<a href="http://javapapers.com/core-java/why-multiple-inheritance-is-not-supported-in-java/">http://javapapers.com/core-java/why-multiple-inheritance-is-not-supported-in-java/</a></p>

<p>James Gosling 在95年二月发表的名为“Java: an Overview”的白皮书中给出了为什么Java不支持多继承的思量。</p>

<blockquote><p>Java略去了好多C++中很少用到的，很难理解的，令人困惑的特性，根据我们的经验这些特性带来的麻烦比它们带来的好处更多。这些去掉的特征主要包括操作符重载(但是Java有方法重载)，<strong>多继承</strong>，广泛的自动强制类型转换。</p></blockquote>

<p>还有谁比James Gosling更有资格来对此作评论。这段话给了我们一个概要，并提起了不支持多继承的话题。</p>

<h2>Java不支持多继承</h2>

<hr />

<p>首先让我们来盖棺定论。Java到底支不支持多继承本身就是一个争议点。有人说Java支持多继承。<strong>不，Java中没有对多继承的支持</strong>。如果你不相信我的话，把上面Java之父的那段话再读一下。</p>

<p>用接口支持多继承的说法是我们这些开发人员自己编造出来的。接口比实体类提供了更高的灵活性，我们可以选择用单个类去实现多个接口。这样我们通过继承两个模板来构建一个类。</p>

<p>这样做是在尝试向多继承靠近。其实我们做的是实现多个接口，却没有继承任何东西。实现一个类的接口的工作是向其中添加属性和方法，而不能直接从父类中获取具体实现。简单地说，Java中没有堆多继承的支持。</p>

<!--more-->


<h2>多继承 Multiple Inheritance</h2>

<p>多继承是我们在一个类中继承多个类的属性和方法。C++，Common Lisp等是常见的流行编程语言中支持多继承的。</p>

<p><img src="http://youli9056.github.io/images/multipleinheritance/Multiple-Inheritance.png" alt="Multiple-Inheritance" /></p>

<h2>Java为什么不支持多继承？  Why Java does not support multiple inheritance?</h2>

<p>现在我们确认了一点：Java不支持多继承。但是为什么？这是Java的创造者们做得决定。主要原因是两点：简洁、极少用到。</p>

<p><strong>简洁</strong></p>

<p>我想分享下James Gosling给Java下的定义</p>

<blockquote><p>Java：一个简单的，面向对象的，分布式的，解释的，健壮的，安全的，架构中立的，可移植的，高性能的，多线程的，动态的语言。</p></blockquote>

<p>看看这个优美的Java定义。这是现代软件开发语言应有的定义。这定义的第一个特性是什么？简单！</p>

<p>为了简洁这个目的应该是删除多继承最主要的原因。比如，我们可以考虑下下面这个多继承的菱形问题。</p>

<p><img src="http://youli9056.github.io/images/multipleinheritance/Diamond-Problem-of-Multiple-Inheritance.png" alt="Diamond-Problem" /></p>

<p>有两个类B和C都继承自A。假设B和C都重载了继承自A的方法，并提供了它们各自不同的实现。现在有一各类D它用多继承同时继承了B、C。D应该继承那个重载的方法，但是使用的时候到底用的是哪个？B的，还是C的？这里不明确，会导致歧义。</p>

<p>C++中提供了额外的方法来规避这个陷阱。在Java中这个问题根本就不会出现。Java中即使一个类实现的多个接口里面有同样的方法，它也只会有一个这样的方法而且它会有自己的实现。类的动态加载机制使得实现多继承变得非常困难。</p>

<p><strong>很少使用</strong></p>

<p>Java已经投入使用很长时间了，有几次我们因为Java没有多继承而碰壁的？以我给人的经验来说，一次都没有！由于很少有场景需要多继承，再考虑到多继承带来的实现上的麻烦，多继承是可以安全的移出的。这样麻烦完全不值，因此Java选择了简洁的途径。</p>

<p>即使确实需要多继承时，我们也可以通过其他设计方法来达到要求。因此没有多继承Java照样可以工作得很好，而且不会带来其他问题，恐怕这也是不要多继承的原因之一。</p>

<p>对此，我的观点是，Java去除多继承并不是她的缺点而且对实现者来说会更简单。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[接口和抽象类的区别  Diference Between Interface and Abstract Class]]></title>
    <link href="http://youli9056.github.io/blog/diference-between-interface-and-abstract-class/"/>
    <updated>2014-11-06T18:03:19+08:00</updated>
    <id>http://youli9056.github.io/blog/diference-between-interface-and-abstract-class</id>
    <content type="html"><![CDATA[<p>面试过程中经常会被问道Java中接口和抽象类有什么区别，总觉得自己总结不好，也不全面。正好这里<a href="http://javapapers.com/core-java/abstract-and-interface-core-java-2/difference-between-a-java-interface-and-a-java-abstract-class/">有篇文章</a>感觉写得很好。下面是内容。</p>

<ol>
<li><p>接口最主要的不同是，接口默认是抽象的，本身不能有任何实现。抽象类可以有为子类提供的默认实例方法。</p></li>
<li><p>接口中的变量默认是final的。抽象类可以包含非final的变量。</p></li>
<li><p>接口的成员默认是public的。抽象类可以有任意类型的成员，private，protected都可以。</p></li>
<li><p>实现接口需要用implements关键字。继承抽象类用extends关键字。</p></li>
<li><p>接口继承一个或者多个接口，但是不能继承或实现任意抽象抑或者实体类。抽象类可以继承另外一个Java类同时还可以实现多个Java接口。</p></li>
<li><p>一个Java类可以实现多个接口，但是只能继承一个抽象类。</p></li>
<li><p>接口是完全抽象的，不能够实例化。抽象类也是不能被实例化的，但是如果其中有main()方法时，还是可以调用。</p></li>
<li><p>和抽象类相比，接口定义的引用在具体执行时由于需要做额外的间接寻址工作因此会慢些。(执行时需要通过搜索具体类的实现方法)</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入理解重载和重写及与之相关的多态性  Overloading and overriding]]></title>
    <link href="http://youli9056.github.io/blog/overloading-and-overriding/"/>
    <updated>2014-11-05T16:03:56+08:00</updated>
    <id>http://youli9056.github.io/blog/overloading-and-overriding</id>
    <content type="html"><![CDATA[<p>本文分割线之前非原创，翻译自<a href="http://javapapers.com/core-java/overloading-and-overriding/">Overloading and overriding</a>.</p>

<p>重载和重写除了在名称上有些相似之外，其实是完全不同的两个东西。</p>

<p>重载的目的是使得我们能够用用一个统一的接口名称来调用一系列方法。这些方法的目的也许是一样的，但是它们的实现方式会根据传入的参数不同而不同。</p>

<p>重写涉及到继承这个概念中的问题。子类继承了父类的方法，但是它可能需要有不同的操作行为，这时候就需要在子类中重写这个父类方法。</p>

<p>重载本身并不是多态，同时运行时绑定重载方法也不是多态的表现。它们以及一些其他的东西都是其面向对象多态性的使用（原文：All these and more are used to exercise the object oriented property polymorphism.总感觉翻译不要，故贴上来）。</p>

<h2>重载和重写的关键点</h2>

<ul>
<li>private： 一个私有的java方法是不能被重写的，因为它对子类压根就不可见</li>
<li>final：重载一个final的方法是可以的，但是不能重写它，因此父类如果将方法声明为final的就可保证所有子类的调用此方法时调用的都是父类的方法。</li>
<li>final：如果两个方法有同样的参数列表，而其中一个的参数被声明为final的这种情况下这两个方法完全一样，因此不可重载。编译都通不过，因为这两个方法被视为完全一样。</li>
<li>static：可以重载一个静态的Java方法但是不能重写静态的Java方法，因为静态方法在方法区中只有一个。</li>
<li>static：重载是关于对象(实例）和继承而言的。一个声明为静态的方法属于整个类(对于这个的所有对象都是一样的)。因此重写它没有任何意义。</li>
<li>static：对于重载，两个静态方法的重载没有什么特别的，只不过是修饰符多了个static修饰符。参数列表依然必须不同。</li>
</ul>


<!--more-->


<h2>重载</h2>

<p>让我们来详细讨论下重载。在各种网站上我看到了大量的重载的例子。它们向类中添加更多的属性、方法，把它变得看起来更庞大作为重载的象征。事实上正确的方式是，当我们使用重载时外部看起来我们的类会变得更加紧凑。</p>

<p><img src="http://youli9056.github.io/images/overloadingandoverriding/beforeoverloading.png" alt="重载之前" /></p>

<p>这里贴出来两个图片，第一张里面是印度的古典乐器脚踏式风琴，它是现代钢琴的鼻祖。另一幅图片是现代的电子琴。在我们的重载语境中，古典风琴是重载之前，电子琴是重载之后。</p>

<p><img src="http://youli9056.github.io/images/overloadingandoverriding/afteroverloading.png" alt="重载之后" /></p>

<h3>Java Example for Method Overloading</h3>

<hr />

<pre><code>public class OverloadingExample {
    public static void main(String args[]){
        System.out.println(playMusic("C sharp","D sharp"));
        System.out.println(playMusic("C","D flat","E flat"));
    }
    public static String playMusic(String c, String d){
        return c+d;
    }
    public static String playMusic(String c, String d, String e){
        return c+d+e;
    }
}
</code></pre>

<h3>Java Overloading Puzzle</h3>

<hr />

<pre><code>package com.javapapaer.java;

public class NullArguementOverloading {
    public static void main(String[] args) {
        NullArguementOverloading obj = new NullArguementOverloading();
        obj.overLoad(null);
    }
    private void overLoad(Object o){
        System.out.println("Object o arguement method.");
    }
    private void overLoad(double[] dArray){
        System.out.println("Double array argument method.");
    }
}
</code></pre>

<p>猜一猜，上面的输出是啥？</p>

<h3>Overriding  重写</h3>

<hr />

<p>当继承一个类的时候,根据父类方法的访问修饰符子类可以获得所有protect以上的父类方法。但是父类的方法的具体行为可能在子类中并不适合，因此我们需要根据子类对于这个方法的需求重写继承自父类的这个方法。重写后原来的旧方法对于这个子类会完全废弃。</p>

<p>看看下面这个猛兽皮卡，因为需求不同了，原来又小又旧的轮子被换成了巨无霸。这就是现实生活中的重写。</p>

<p><img src="http://youli9056.github.io/images/overloadingandoverriding/Overriding.png" alt="Overriding" /></p>

<h3>Overriding in Java/JDK</h3>

<p>在Java中默认所有对象都是继承自Object类。Object有个叫<em>equals</em>的方法，在String类中重写了它的默认行为。String中通过比较传入的对象与本身保存的字符串序列一一对比看是否相等。</p>

<h1>分割线～～～～～～～～～～～～～～～～～～～～～～～</h1>

<hr />

<p>关于上面Overloading Puzzle，以免强迫症患者费心敲代码在此给出答案和解释。</p>

<p>程序输出：<strong>Double array argument method.</strong></p>

<p>原因是Java对于重载的处理有个最精确原则。Object和double[]都可以和null匹配，但是两者对比而言，double[]比Object匹配得更精确，所以调用了下面的overLoad方法。如果想让程序调用Object的overLoad方法则需要一个强制类型转换<code>obj.overLoad((Object)null);</code>这样Object的overLoad就要比double[]的更精确,会输出<em>Object o arguement method.</em>。</p>

<p>下面这段代码也许理解起来会更清晰一些，ArrayList继承自List：</p>

<pre><code>import java.util.ArrayList;
import java.util.List;

public class OverridePuzzle {

    private void overloadList(List list){
        System.out.println("List arguement method.");
    }

    private void overloadList(ArrayList arrayList){
        System.out.println("ArrayList arguement method");
    }
    public static void main(String[] args) {
        OverridePuzzle op = new OverridePuzzle();
        op.overloadList(null);
    }

}
</code></pre>

<p>那么它将输出:<strong>ArrayList arguement method</strong>，因为ArrayList比List匹配得更精确。</p>

<p>那又要问了，如果上文的NullArguementOverloading代码中还有个overLoad方法如下：</p>

<pre><code>private void overLoad(String str) {
    System.out.println("String argument method.");
}
</code></pre>

<p>那么程序会怎样呢？答案是main函数<code>obj.overLoad(null)</code>那一行会编译报错。String的overLoad和double[]的overLoad都可以匹配，但是两者在继承属上是平行的，因此编译器也不知道到底该调用哪一个重载方法。另外这段代码还说明了一个问题：重载是在编译期就已经确定了的，并不需要等到运行时才能确定。这也是为什么说它不是多态的一个原因。</p>

<p>还有下面一段代码作为佐证：</p>

<pre><code>import java.util.ArrayList;
import java.util.List;

public class OverridePuzzle {

    private void overloadList(List list){
        System.out.println("List arguement method.");
    }

    private void overloadList(ArrayList arrayList){
        System.out.println("ArrayList arguement method");
    }
    public static void main(String[] args) {
        OverridePuzzle op = new OverridePuzzle();
        List list = new ArrayList&lt;String&gt;();
        op.overloadList(list);
    }

}
</code></pre>

<p>程序输出：<strong>List arguement method.</strong>。显然这里重载对于传入的参数类型只认了引用的类型，并没有去解析实际对象的类型。如果重载是一种多态的话，它这里应该去解析实际对象的类型并调用ArrayList的方法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java垃圾回收机制四  Monitoring and Analyzing Java Garbage Collection]]></title>
    <link href="http://youli9056.github.io/blog/monitoring-and-analyzing-java-garbage-collection/"/>
    <updated>2014-11-05T13:20:34+08:00</updated>
    <id>http://youli9056.github.io/blog/monitoring-and-analyzing-java-garbage-collection</id>
    <content type="html"><![CDATA[<p>在这篇Java垃圾回收系列文章中，让我们看下一些监控和分析垃圾回收的工具。然后用工具尝试监控和分析一个例子。初学者最好先看下<a href="http://youli9056.github.io/blog/categories/gc/">此系列</a>,从<a href="http://youli9056.github.io/blog/java-garbage-collection-introduction">Java 垃圾回收简介</a>开始吧。</p>

<h2>Java垃圾回收监控和分析工具</h2>

<p>下面是一些监控工具，它们有各自的优缺点。我们可以通过选择恰当的工具做一些有序的分析工作来提升应用性能。这篇文章将从Java VisualVM开始讲起。</p>

<ul>
<li>Java VisualVM</li>
<li>Naarad</li>
<li>GCViewer</li>
<li>IBM Pattern Modeling and Analysis Tool for Java Garbage Collector</li>
<li>HPjmeter</li>
<li>IBM Monitoring and Diagnostic Tools for Java &ndash; Garbage Collection and Memory</li>
<li>Visualizer</li>
<li>Verbose GC Analyzer</li>
</ul>


<h2>Java VisualVM</h2>

<p>Java VisualVM是在Java SE SDK安装时免费提供的。看下你的Java JDK安装目录下的<code>/bin</code>目录，<code>\Java\jdk1.8.0\bin</code>。此目录下有许多其他工具包括javac和java工具，jvisualvm就是其中一个。</p>

<!--more-->


<p>Java VisualVM对运行中的Java应用提供了可视化的信息展示。它是很多工具的整合包，像工具JConsole,jstat,jinfo,jstack以及jmap现在都是Java VisualVM的一部分。</p>

<p>Java VisualVM可以用来
- 生成和分析堆内存的dump
- 观察和操作MBeans
- 监控垃圾回收
- 内存和CPU性能分析</p>

<h3>1. Launch VisualVM</h3>

<p><code>jvisualvm</code>已经包含在了JDK的bin目录下,如果以设置环境变量path，则可以直接在命令行中运行<code>jvisualvm</code>，将出现如下启动界面</p>

<p><img src="http://youli9056.github.io/images/monitoringandanalysisgc/Start-Java-VisualVM.png" alt="starting jvisualvm" /></p>

<p><img src="http://youli9056.github.io/images/monitoringandanalysisgc/Java-VisualVM.png" alt="jvisualvm view" /></p>

<h3>2.安装Visual GC插件</h3>

<p>我们需要安装visual GC 插件才能有个堆Java GC线程的漂亮和有价值的视觉感受。在上面的启动界面中点击工具->插件->可用插件->Visual GC</p>

<p><img src="http://youli9056.github.io/images/monitoringandanalysisgc/Visual-GC-Plugin.png" alt="visual gc" /></p>

<p>安装。</p>

<h3>3. 监控GC</h3>

<p>现在可以监控<a href="http://youli9056.github.io/blog/java-gc-yuan-li/">垃圾回收</a>过程了。开启你的Java应用程序，Java VisualVM会自动检测并将其显示到界面上。在左边“应用程序”面板的“本地”节点下面，所有本地运行的Java应用都会被列举出来。</p>

<p>Java VisualVM自己本身也是一个Java应用程序，因此它自身也被列了出来。作为本文的目的我们将监控VisualVM应用本身的GC过程。</p>

<p>双击“本地”节点下的VisualVM图标。</p>

<p><img src="http://youli9056.github.io/images/monitoringandanalysisgc/GC-Analysis.jpg" alt="visualvm gc" /></p>

<p>这样应用程序的监控面板会在右边打开。面板上有多个标签，每个里面展示了与应用程序性能相关的方面。由于我们现在主要关注“Visual GC”，so，点之。</p>

<p><img src="http://youli9056.github.io/images/monitoringandanalysisgc/Heap-Memory-Space-Allocation.png" alt="Heap Memory Space Allocation" /></p>

<p>上面的图片显示了Old，Eden，S0，S1使用的内存空间。下面的图表显示了各个部分申请和释放内存的详细信息。它以设定的刷新频率不停地跟新。</p>

<p><img src="http://youli9056.github.io/images/monitoringandanalysisgc/GC-Graphs.png" alt="gc graph" /></p>

<p>上图显示的是一个正常运行的程序。当发生内存泄露或者不正常的操作时，可以从图形本身明显地看出来。至少我们可以知道程序中存在和对象内存分配和垃圾回收相关的问题。然后利用其他标签如“Threads”中提供的信息和Thread Dump我们可以缩小发生问题的范围。</p>

<p>在“监视”标签中，我们可以看到以时间线发展的内存使用概况图。这里有个“执行垃圾回收”按钮可以调用垃圾回收过程。
<img src="http://youli9056.github.io/images/monitoringandanalysisgc/Perform-GC.png" alt="perform gc" /></p>

<p>在“抽样器”标签中我们可以开始内存和CPU分析工作。抽样器会实时显示各个实例的使用情况。它可以帮助确定性能问题到底发生在哪里。</p>

<p><img src="http://youli9056.github.io/images/monitoringandanalysisgc/Instances-Memory-Allocation.png" alt="instance memory allocation" /></p>

<p>到此为止，关于<a href="http://youli9056.github.io/blog/categories/gc/">Java 垃圾回收的系列文章</a>已经完结了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java垃圾回收机制三  Types of Java Garbage Collectors]]></title>
    <link href="http://youli9056.github.io/blog/types-of-java-garbage-collectors/"/>
    <updated>2014-11-05T11:07:33+08:00</updated>
    <id>http://youli9056.github.io/blog/types-of-java-garbage-collectors</id>
    <content type="html"><![CDATA[<p>本文是Java垃圾回收系列的第三篇，非原创，翻译自<a href="http://javapapers.com/java/types-of-java-garbage-collectors/">Types of Java Garbage Collectors</a>。如果没有相应基础的话，阅读本文前建议先阅读前两篇<a href="http://youli9056.github.io/blog/java-garbage-collection-introduction/">Java Garbage Collection Introduction</a>(介绍了JVM的架构，堆内存模型和周边相关的Java术语)和<a href="http://youli9056.github.io/blog/java-gc-yuan-li/">How Java Garbage Collection Works?</a>(概况介绍了GC是如何工作的)</p>

<p>本文将会介绍各种不同类型的Java垃圾回收器。垃圾回收是Java用来将程序员从分配和释放内存的琐事中解放出来的自动过程。</p>

<p>Java有四种类型的垃圾回收器，</p>

<ol>
<li><a href="http://youli9056.github.io/blog/types-of-java-garbage-collectors/#serial-garbage-collector">Serial Garbage Collector</a></li>
<li><a href="http://youli9056.github.io/blog/types-of-java-garbage-collectors/#parallel-garbage-collector">Parallel Garbage Collector</a></li>
<li><a href="http://youli9056.github.io/blog/types-of-java-garbage-collectors/#cms-garbage-collector">CMS Garbage Collector</a></li>
<li><a href="http://youli9056.github.io/blog/types-of-java-garbage-collectors/#g1-garbage-collector">G1 Garbage Collector</a></li>
</ol>


<p><img src="http://youli9056.github.io/images/typesofjavagarbagecollectors/Types-of-Java-Garbage-Collectors3_th_thumb.jpg" alt="各种类型的Java垃圾回收器" /></p>

<!--more-->


<p>这四种类型的垃圾回收器都有各自的优点和缺点。最重要的是程序员可以选择JVM使用哪种类型的垃圾回收器。我们可以通过传递不同的JVM参数来设置使用哪一个。各个垃圾回收器在不同应用场景下的效率会有很大的差异。因此了解各种不同类型的垃圾回收器以及它们的应用场景是非常重要的。</p>

<h2>1. <span id="serial-garbage-collector">Serial Garbage Collector</span></h2>

<p>串行垃圾回收器控制所有的应用线程。它是为单线程场景设计的，只使用一个线程来执行垃圾回收工作。它暂停所有应用线程来执行垃圾回收工作的方式不适用于服务器的应用环境。它最适用的是简单的命令行程序。</p>

<p>使用<code>-XX:+UseSerialGC</code>JVM参数来开启使用串行垃圾回收器。</p>

<h2>2.<span id="parallel-garbage-collector"> Parallel Garbage Collector</span></h2>

<p>并行垃圾回收器也称作基于吞吐量的回收器。它是JVM的默认垃圾回收器。与Serial不同的是，它使用多个线程来执行垃圾回收工作。和Serial回收器一样，它在执行垃圾回收工作是也需要暂停所有应用线程。</p>

<h2>3.<span id="cms-garbage-collector"> CMS Garbage Collector</span></h2>

<p>并发标记清除(Concurrent Mark Sweep,CMS)垃圾回收器，使用多个线程来扫描堆内存并标记可被清除的对象，然后清除标记的对象。CMS垃圾回收器只在下面这两种情形下暂停工作线程，</p>

<ol>
<li>在老年代中标记引用对象的时候</li>
<li>在做垃圾回收的过程中堆内存中有变化发生</li>
</ol>


<p>对比与并行垃圾回收器，CMS回收器使用更多的CPU来保证更高的吞吐量。如果我们可以有更多的CPU用来提升性能，那么CMS垃圾回收器是比并行回收器更好的选择。</p>

<p>使用<code>-XX:+UseParNewGC</code>JVM参数来开启使用CMS垃圾回收器。</p>

<h2>4.<span id="g1-garbage-collector"> G1 Garbage Collector</span></h2>

<p>G1垃圾回收器应用于大的堆内存空间。它将堆内存空间划分为不同的区域，对各个区域并行地做回收工作。G1在回收内存空间后还立即堆空闲空间做整合工作以减少碎片。CMS却是在全部停止(stop the world,STW)时执行内存整合工作。对于不同的区域G1根据垃圾的数量决定优先级。</p>

<p>使用<code>-XX:UseG1GC</code>JVM参数来开启使用G1垃圾回收器。</p>

<p><strong>Java 8 的优化</strong></p>

<p>在使用G1垃圾回收器是，开启使用<code>-XX:+UseStringDeduplacaton</code>JVM参数。它会通过把重复的String值移动到同一个char[]数组来优化堆内存占用。这是<em>Java 8 u 20</em>引入的选项。</p>

<p>以上给出的四个Java垃圾回收器，在什么时候使用哪一个去决于应用场景，硬件配置和吞吐量要求。</p>

<h2>Garbage Collection JVM Options</h2>

<p>下面是些主要的与Java垃圾回收相关的JVM选项。</p>

<h3>Type of Garbage Collector to run</h3>

<table>
<thead>
<tr>
<th>选项</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-XX:+UseSerialGC</td>
<td>串行垃圾回收器</td>
</tr>
<tr>
<td>-XX:+UseParallelGC</td>
<td>并行垃圾回收器</td>
</tr>
<tr>
<td>-XX:+UseConcMarkSweepGC</td>
<td>CMS垃圾回收器</td>
</tr>
<tr>
<td>-XX:ParallesCMSThread=</td>
<td>CMS垃圾回收器&ndash;使用的线程数量</td>
</tr>
<tr>
<td>-XX:UseG1GC</td>
<td>G1垃圾回收器</td>
</tr>
</tbody>
</table>


<h3>GC 优化选项</h3>

<table>
<thead>
<tr>
<th>选项</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-Xms</td>
<td>初始堆内存大小</td>
</tr>
<tr>
<td>-Xmx</td>
<td>最大堆内存大小</td>
</tr>
<tr>
<td>-Xmn</td>
<td>年轻代的大小</td>
</tr>
<tr>
<td>-XX:PermSize</td>
<td>初始永久代的大小</td>
</tr>
<tr>
<td>-XX:MaxPermSize</td>
<td>最大的永久代的大小</td>
</tr>
</tbody>
</table>


<h3>Example Usage of JVM GC Options</h3>

<pre><code>java -Xmx12m -Xms3m -Xmn1m -XX:PermSize=20m -XX:MaxPermSize=20m -XX:+UseSerialGC -jar java-application.jar
</code></pre>

<p>在垃圾回收系列的<a href="http://youli9056.github.io/blog/monitoring-and-analyzing-java-garbage-collection/">下一篇</a>中，将通过一个例子介绍如何区监控和分析垃圾回收。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java垃圾回收机制一  简介--Java Garbage Collection Introduction]]></title>
    <link href="http://youli9056.github.io/blog/java-garbage-collection-introduction/"/>
    <updated>2014-11-04T15:49:16+08:00</updated>
    <id>http://youli9056.github.io/blog/java-garbage-collection-introduction</id>
    <content type="html"><![CDATA[<p>本文非原创，翻译自<a href="http://javapapers.com/java/java-garbage-collection-introduction/">Java Garbage Collection introduction</a>
在Java中为对象分配和释放内存空间都是由垃圾回收线程自动执行完成的。和C语言不一样的是Java程序员不需要手动写垃圾回收相关的代码。这是使得Java如此流行，同时也是Java能帮助程序员写出更好的Java应用的优点之一。</p>

<p>计划写一个介绍Java垃圾回收基础的系列文章，共分四部分：</p>

<ol>
<li><a href="http://youli9056.github.io/blog/java-garbage-collection-introduction/">Java垃圾回收简介</a></li>
<li><a href="http://youli9056.github.io/blog/java-gc-yuan-li/">Java垃圾回收器是如何工作的？</a></li>
<li><a href="http://youli9056.github.io/blog/types-of-java-garbage-collectors">各种类型的Java垃圾回收器</a></li>
<li><a href="http://youli9056.github.io/blog/monitoring-and-analyzing-java-garbage-collection">Java垃圾回收的监控和分析</a></li>
</ol>


<p>本文是这个系列的第一篇文章，这篇文章将会介绍一些基本术语，如：JDK，JVM，JRE，HotSpot VM，以及理解JVM的架构和Java堆内存结构。在开始学习Java垃圾回收机制之前确实有必要了解一下这些基本东西。</p>

<h2>关键的Java术语</h2>

<ul>
<li>Java API&ndash;一个帮助程序员创建Java应用的打包好的库集合</li>
<li>Java Development Kit(JDK)&ndash;一个使得程序员能够开发Java应用的工具集合</li>
<li>Java Virtual Machine(JVM)&ndash;JVM是一个抽象的计算机。Java程序是针对JVM规范写的。JVM是根据不同的操作系统平台实现的，它将Java指令翻译成对应平台上的指令，并执行。这样Java程序能够达到平台独立性。</li>
<li>Java Runtime Environment(JRE)&ndash;JRE由一个JVM的实现和Java API组成。</li>
</ul>


<h2>Java HotSpot虚拟机</h2>

<p>每个JVM的实现在对垃圾回收的原理的实现方式上会有一些不同。在收购SUN之前Oracle有JRockit JVM，收购SUN之后有了HotSpot虚拟机。目前Oracle同时维护了这两个虚拟机，并宣称将来会将两个虚拟机合并。</p>

<!--more-->


<p>HotSpot虚拟机是Oracle标准版平台的核心组成部分。在本垃圾回收系列文章中我们将通过HotSpot虚拟机来了解垃圾回收的基本准则。</p>

<h2>JVM 架构</h2>

<p>下面的这幅图概括了一个JVM中的主要组成。在JVM架构中，堆内存和垃圾回收器这两个部分和垃圾回收相关。堆内存是运行时用来存储实例对象的数据空间，垃圾回收器运行在堆内存上。现在我们大概知道它们是怎样的一个工作模式。<img src="http://youli9056.github.io/images/introductiontogc/JVM-Architecture.jpg" alt="JVM 架构图" /></p>

<h2>Java 堆内存</h2>

<p>在Java的内存模型中，最重要的是要了解堆内存的概念。运行时的Java实例对象存储在堆内存空间中。当一个对象不再被引用了，它变成可被从堆内存中回收空间。在垃圾回收的过程中，这些对象将被从堆内存中清除，同时它们的空间也就被回收了。堆内存的空间主要分成了三部分，</p>

<ol>
<li><p>年轻代</p>

<ol type="a">
<li>Eden区(所有实例在运行时最初都分配到eden区中)</li>
<li>S0 Survivor Space(老一些的对象被从eden区移动到S0区，其实是eden区中的对象经过一次对eden区的Young GC还存活的对象被移动到S0)</li>
<li>S1 Survivor Space(再老一些的对象被从S0区移动到S1区，其实是在Young GC过程中S0区已满，则会将eden区中还存活的对象和S0区中的存活对象移动到S1区中)</li>
</ol>
</li>
<li><p>老年代(经过S0，S1中几轮迭代后还存活的对象被提升到老年代)</p></li>
<li>永久代(包含一些元数据像类、方法等等)</li>
</ol>


<p><img src="http://youli9056.github.io/images/introductiontogc/Java-Heap-Memory.jpg" alt="Java堆内存空间" /></p>

<p><em>更新:永久代在Java8中被去掉了</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[do not say these words when debuging]]></title>
    <link href="http://youli9056.github.io/blog/do-not-say-these-words-when-debuging/"/>
    <updated>2014-11-04T10:25:23+08:00</updated>
    <id>http://youli9056.github.io/blog/do-not-say-these-words-when-debuging</id>
    <content type="html"><![CDATA[<p>there is some interesting saying, when problems came out</p>

<blockquote><p>Bushit, that&rsquo;s impossible!</p>

<p>It&rsquo;s okay on my mechine!</p>

<p>It shouldn&rsquo;t&hellip;</p>

<p>It must be someone else&rsquo;s problem!</p>

<p>Why it&rsquo;s ok previously?</p></blockquote>

<p>HHHHHaaaa!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java垃圾回收机制二  工作原理--How Java Garbage Collection Works?]]></title>
    <link href="http://youli9056.github.io/blog/java-gc-yuan-li/"/>
    <updated>2014-10-22T19:34:46+08:00</updated>
    <id>http://youli9056.github.io/blog/java-gc-yuan-li</id>
    <content type="html"><![CDATA[<p>本文并非原创，翻译自文章<a href="http://javapapers.com/java/how-java-garbage-collection-works/">How Java Garbage Collection Works?</a>
这篇文章的主要目的是来理解Java垃圾回收机制的基本原理以及它是如何工作的。这是垃圾回收机制系列文章的第二篇。希望您已经读过了第一部分<a href="http://youli9056.github.io/blog/java-garbage-collection-introduction/">Java垃圾回收简介</a>.</p>

<p>Java垃圾回收是一个自动运行的管理程序运行时使用的内存的进程。通过GC的自动执行JVM将程序员从申请和释放内存的繁重操作中解放出来。</p>

<h2>Java垃圾回收GC初始化</h2>

<p>作为一个自动执行的进程，程序员不需要在代码中主动初始化GC。Java提供了<code>System.gc()</code>和<code>Runtime.gc()</code>这两个hook来请求JVM调用GC进程。</p>

<p>尽管要求系统机制给程序员提供调用GC的机会，但是实际上这是由JVM负责决定的。JVM可以选择拒绝启动GC的请求，因此并不保证这些请求会真的调用垃圾回收。这是JVM基于内存堆空间的Eden区的使用情况做出的决定。JVM规范将这个选择权利留给了各个JVM的具体实现，因此实际上JVM是如何选择的视不同JVM的实现而定(不过要记住的是，不能依赖于这两个方法的调用，它们是不被保证执行的)。</p>

<p>毫无疑问的是，我们知道垃圾回收进程是不能强制执行的。不过我刚发现一个调用<code>System.gc()</code>确实有意义的场景。看下这篇文章你就会了解<a href="http://javapapers.com/core-java/system-gc-invocation-a-suitable-scenario/">System.gc()调用是可用的</a>这个特殊的场景。</p>

<h2>Java 垃圾回收进程</h2>

<p>垃圾回收是一个回收不再使用的内存空间并将它变成能够为将来的实例使用的过程。<img src="http://youli9056.github.io/images/howjavaGCworks/Java-Garbage-Collection-Process3_thumb.jpg" alt="java gc collection process3" /></p>

<!--more-->


<p><strong>Eden Space:</strong>当一个实例被创建的时候，它最初被存放在堆内存空间的年轻代的Eden区中。</p>

<p><em>注意：如果您不太理解这些术语，建议您先看下介绍内存模型、JVM架构及这些术语的详细解释的文章：<a href="http://javapapers.com/java/java-garbage-collection-introduction/">garbage-collection-introduction-tutorial</a></em></p>

<p><strong>Survivor Space(S0 和S1):</strong>作为minor回收周期的一部分，还活着的对象（还有引用指向它）被从eden区中移动到survivor空间S0。同样的，垃圾回收器扫描S0并将活着的实例移动到S1。</p>

<p>无用的对象（没有引用指向）被标记并回收。垃圾回收器（有四种可用的垃圾回收器，将在下一篇文章中介绍）决定这些被标记的实例是在扫描的过程中移出内存还是在另外独立的迁移进程中执行。</p>

<p><strong>Old Generation:</strong>老年代或者永久代是堆内存的第二个逻辑部分。当垃圾回收器在做minor GC周期中，S1 survivor区中还活着的实例会被提升到老年代中。S1区中不再被引用的对象被标记并清除。</p>

<p><strong>Major GC:</strong>在Java垃圾回收过程中实例生命周期的最后一个阶段。Major GC在垃圾回收过程中扫描属于Old Generation部分的堆内存。如果实例没有被任何引用关联，它们将被标记、清除；如果它们还被引用关联着，则将继续存留在old generation。</p>

<blockquote><p><strong>Memory Fragmentation:</strong>一旦实例从堆内存中删除了，它们原来的位置将空出来给以后分配实例使用。显然这些空闲空间很容易在内存空间中产生碎片。为了能够更快地分配实例地址，需要对内存做去碎片化操作。根据不同垃圾回收器的策略，被回收的内存将在回收的过程同时或者在GC另外独立的过程中压缩整合。</p></blockquote>

<h2>垃圾回收过程中的对象销毁&ndash;Finalization</h2>

<p>就在移除一个对象并回收它的内存空间之前，Java垃圾回收器将会调用各个实例的<code>finalize()</code>方法，这样实例对象就有机会可以释放掉它占用的资源。尽管<code>finalize()</code>方法是保证在回收内存空间之前执行的，但是对具体的执行时间和执行顺序是没有任何保证的。多个实例之间的<code>finalize()</code>执行顺序是不能提前预知的，甚至有可能它们是并行执行的。程序不应该预先假设实例执行<code>finalize()</code>的方法，也不应该使用<code>finalize()</code>方法来回收资源。</p>

<ul>
<li>在finalize过程中抛出的任何异常都默认被忽略掉了，同时对象的销毁过程被取消</li>
<li>JVM规范并没有讨论关于弱引用的垃圾回收，这是明确声明的。具体的细节留给实现者决定。</li>
<li>垃圾回收是由守护进程执行的</li>
</ul>


<h2>对象何时变成可被垃圾回收的？</h2>

<ul>
<li>所有不能被活着的线程到达实例</li>
<li>不能被其他对象到达的循环引用对象
Java中有<a href="http://javapapers.com/core-java/java-weak-reference/">多种不同的引用类型</a>。实例的可回收性取决于它的引用类型。</li>
</ul>


<table>
<thead>
<tr>
<th> Reference   </th>
<th> Garbage Collection </th>
</tr>
</thead>
<tbody>
<tr>
<td> Strong Refrence </td>
<td> 不被垃圾回收   </td>
</tr>
<tr>
<td> Soft Reference </td>
<td> 作为最后的选择，有可能被回收</td>
</tr>
<tr>
<td> Weak Reference </td>
<td> 可以被垃圾回收 </td>
</tr>
<tr>
<td> Phantom Reference </td>
<td> 可以被垃圾回收</td>
</tr>
</tbody>
</table>


<p>在编译过程中Java编译器有个优化机制，编译器可以选择将<code>null</code>赋值给一个实例，这样就将这个实例标志为可被回收的。</p>

<pre><code>class Animal {
    public static void main(String[] args) {
        Animal lion = new Animal();
        System.out.println("Main is completed.");
    }

    protected void finalize() {
        System.out.println("Rest in Peace!");
    }
}
</code></pre>

<p>在上面这个类中，实例<code>lion</code>在除了初始化那一行在其他地方都没有被使用到。因此作为一种优化方法，Java编译器可以在初始化那一行后面立即赋值<code>lion = null</code>。这样finlizer可能会在Main方法的SOP之前打印结果。</p>

<pre><code>Rest in Peace！
Main is completed.
</code></pre>

<p>但结果的顺序是不确定的，它取决于JVM的实现以及运行时的内存使用情况。从中我们能知道的一点是：编译器在发现一个实例的之后的程序中不再被引用时可以选择提前释放实例内存。</p>

<ul>
<li>这里有个实例何时变成可回收更好的例子。实例所有的属性可以被存储在寄存器中之后可以从寄存器中读取这些属性值，且未来在任何情况下都不会将值写回到实例对象中。这样尽管这个实例在未来还是被使用到了，但是实例对象依然可以被标记为可回收的。</li>
<li>何时能被垃圾回收可以简单到仅仅认为在赋值为null的时候也可以复杂到如上面那一点所说的那样。JVM的实现者会做一些取舍。其目标都是希望留下最少的痕迹，提高响应时间增大吞吐量。为了能够达到这些目的，JVM实现者可以在垃圾回收中选择更好的模式或算法来回收内存。</li>
<li>当<code>finalize()</code>被调用的时候，JVM释放掉当前线程的所有同步块。</li>
</ul>


<p><strong>Example Program for GC Scope</strong></p>

<pre><code>class GCScope {
    GCScope t;
    static int i = 1;
    public static void main(String args[]) {
        GCScope t1 = new GCScope();
        GCScope t2 = new GCScope();
        GCScope t3 = new GCScope();
        //没有任何一个对象是可以被GC的
        t1.t = t2;//没有任何一个对象是可以被GC的
        t2.t = t3;//没有任何一个对象是可以被GC的
        t3.t = t1;//没有任何一个对象是可以被GC的

        t1 = null;//没有任何一个对象是可以被GC的,t3.t还有对t1的引用

        t2 = null;//没有任何一个对象是可以被GC的,t3.t.t还有对t2的引用
        t3 = null;//所有3个对象都可以被GC(没有一个被引用了）
                  //只有各个对象的变量t互相循环引用形成了一个孤立的引用环，而没有外部引用
    }
    protected void finalize() {
        System.out.println("Garbage collected from boject" + i);
        i++;
    }
}
</code></pre>

<p><strong>Example Program for GC OutOfMemoryError</strong></p>

<p>垃圾回收机制并不保证发生内存溢出时的安全，事实上内存溢出将会导致程序的崩溃，抛出<code>OutOfMemoryError</code>。</p>

<pre><code>import java.util.LinkedList;
import java.util.List;

public class GC {
    public static void main(String[] args[]) {
        List l = new LinkedList();
        //进入内部无限循环直接向链表中不断添加元素
        do {
            l.add(new String("Hello, World!");
        } while (true);
    }
}
</code></pre>

<p><em>Output</em></p>

<pre><code>Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
    at java.util.LinkedList.linkLast(LinkedList.java:142)
    at java.util.LinkedList.add(LinkedList.java:338)
    at com.javapapers.java.GCScope.main(GCScope.java:12)
</code></pre>

<p>下面将会将垃圾回收系列文章的第三部分：<a href="http://javapapers.com/java/types-of-java-garbage-collectors/">Different types of Java garbage collectors avaliable</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[markdown learn]]></title>
    <link href="http://youli9056.github.io/blog/markdownlearn/"/>
    <updated>2014-08-18T01:07:36+08:00</updated>
    <id>http://youli9056.github.io/blog/markdownlearn</id>
    <content type="html"><![CDATA[<h1>A First Level Header</h1>

<p>Some of these words <em>are emphasized</em>.
Some of these words <em>are emphasized also</em>.
Use two asterisks for <strong>strong emphasis</strong>.
Or, if you prefer, <strong>use two underscores instead</strong>.</p>

<h2>A Second Level Header</h2>

<p>Now is the time for all good men to come to the aid of their country,
This is just a regular paragraph.</p>

<p>The quick brown fox jumped over the lazy dog&rsquo;s back.</p>

<h3>Header 3</h3>

<blockquote><p>This is a blockquote.</p>

<p>This is the second paragraph in the blockquote.</p>

<p>This is an H2 in a blockquote</p></blockquote>

<p>Some of these words <em>are emphasized</em>.
Some of these words <em>are emphasized also</em>.
Use two asterisks for <strong>strong emphasis</strong>.
Or, if you prefer, <strong>use two underscores instead</strong>.</p>

<h3>Lists</h3>

<h4>无序列表</h4>

<p>无序列表使用星号，加号和减号作为列表项目的标记</p>

<h5>星号</h5>

<ul>
<li>Candy.</li>
<li>Gum.</li>
<li>Booze.

<h5>加号</h5></li>
<li>Candy.</li>
<li>Gum.</li>
<li>Booze.

<h5>减号</h5></li>
<li>Candy.</li>
<li>Gum.</li>
<li>Booze.

<h5>混合使用</h5></li>
<li>Candy.</li>
<li>Gum.</li>
<li>Booze.
由上面的测试可以显示，三者之间是完全等价的（<strong>符号和内容之间要有一个空格</strong>）

<h4>有序列表</h4>

<p>有序列表使用数字接着一个英文句点作为项目标记：</p></li>
<li>Red</li>
<li>Green</li>
<li>Bule
<strong>句点和内容之间要有一个空格</strong>

<h4>项目之间的空行问题</h4></li>
<li><p>A list item.</p>

<p>  With multiple paragraphs.</p></li>
<li><p>Another item in the list.</p></li>
</ul>


<!--more-->


<h3>链接</h3>

<p>Markdown有两种链接的语法：行内和参考两种形式，都是使用角括号来把文字转成链接。
行内形式是直接在后面用括号直接接上链接：
This is an <a href="http://example.com/">example link</a>.
也可以选择给链接加上title属性：
This is an <a href="http://example.com/" title="With a Title which inditicates as a tooltip">titled example link</a>.</p>

<p>参考形式的链接让你可以为链接定一个名称，之后你可以在文件的其他地方定义该链接的内容：
I get 10 times more traffic from <a href="http://google.com/" title="Google">Google</a> than from
<a href="http://search.yahoo.com/" title="Yahoo Search">Yahoo</a> or <a href="http://search.msn.com/" title="MSN Search">MSN</a>.</p>

<p>title 属性是选择性的，链接名称可以用字母、数字和空格，但是不分大小写：</p>

<p>I start my morning with a cup of coffee and
<a href="http://www.nytimes.com/">The New York Times</a>.</p>

<h4>图片</h4>

<p>图片的语法和链接很像。
行内形式（title是可选择的）：</p>

<p><img src="http://youli9056.github.io/images/markdownlearn/keyboardcat.gif" title="Cat" alt="我的照片" /></p>

<p>参考形式：</p>

<p><img src="http://youli9056.github.io/images/markdownlearn/keyboardcat.gif" title="Cat cat" alt="my picture" /></p>

<h6>注意点</h6>

<blockquote><p>链接的路径，最好设置成/images/blogname/picturefilename.jpg,绝对路径</p>

<p>参考形式的冒号和路径之间要有个空格</p></blockquote>

<h4>代码</h4>

<p>在一般段落文字中，可以使用反引号 ` 来标记代码区段，区段的<code>&amp;</code>、<code>&lt;</code>、<code>&gt;</code>都会被自动转换成HTML实体，反引号可以很容易在代码区段中插入HTML代码：</p>

<p>I strongly recommend against using any <code>&lt;blink&gt;</code> tags.</p>

<p>I wish SmartyPants used named entities like <code>&amp;mdash;</code>
instead of decimal-encoded entites like <code>&amp;#8212;</code>.</p>

<p>如果要建立一个已经格式化好的代码区块，只要每行都缩进 4 个空格或是一个 tab 就可以了，而 &amp;、&lt; 和 > 也一样会自动转成 HTML 实体。</p>

<p>If you want your page to validate under XHTML 1.0 Strict,
you&rsquo;ve got to put paragraph tags in your blockquotes:</p>

<pre><code>&lt;blockquote&gt;
&lt;p&gt;For example.&lt;/p&gt;
&lt;/blockquote&gt;
</code></pre>
]]></content>
  </entry>
  
</feed>
